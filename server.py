"""Первая часть домашнего задания будет заключаться в реализации простого клиент-серверного взаимодействия по протоколу



 JIM (JSON instant messaging):
клиент отправляет запрос серверу;
сервер отвечает соответствующим кодом результата.

Клиент и сервер должны быть реализованы в виде отдельных скриптов, содержащих соответствующие функции.
Функции клиента:
- сформировать presence-сообщение;
- отправить сообщение серверу;
- получить ответ сервера;
- разобрать сообщение сервера;
- параметры командной строки скрипта client.py <addr> [<port>]:

addr - ip-адрес сервера
port - tcp-порт на сервере, по умолчанию 7777

Функции сервера:
- принимает сообщение клиента;
- формирует ответ клиенту;
- отправляет ответ клиенту;
- имеет параметры командной строки:
-p <port> - TCP-порт для работы (по умолчанию использует порт 7777)
-a <addr> - IP-адрес для прослушивания (по умолчанию слушает все доступные адреса)

2. Тесты.
Для всех функций необходимо написать тесты с использованием doctest (небольшие тесты в документации функций), unittest
 или py.test (в дальнейшем упор будет делаться на библиотеку py.test). Тесты должны быть оформлены в отдельных скриптах
 с префиксом test_ в имени файла (например, test_client.py)."""




# Программа сервера времени
from socket import *
import time

s = socket(AF_INET, SOCK_STREAM)  # Создает сокет TCP
s.bind(('', 8888))                # Присваивает порт 8888
s.listen(5)                       # Переходит в режим ожидания запросов;
                                  # одновременно обслуживает не более
                                  # 5 запросов.
while True:
    client, addr = s.accept()     # Принять запрос на соединение
    print(type(client))
    print("Получен запрос на соединение от %s" % str(addr))
    timestr = time.ctime(time.time()) + "\n"
    print(timestr)
    print(type(timestr))
    
    # Обратите внимание, дальнейшая работа ведётся с сокетом клиента
    client.send(b'Hello Client')   # <- По сети должны передаваться байты,
                                           # поэтому выполняется кодирование строки 
    client.close()

